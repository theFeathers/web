#!/bin/env node

const { writeFileSync } = require("fs");
const { resolve } = require("path");

const chokidar = require("chokidar");

// Make Mithril happy
if (!global.window) {
	global.window = global.document = global.requestAnimationFrame = undefined;
}

const invalidate = (cache, path, { recursive = false }) => {
	if (!recursive) {
		delete require.cache[path];
	} else {
		for (const key in cache) {
			if (key.startsWith(path)) delete require.cache[key];
		}
	}
};

const render = require("mithril-node-render");
const getTemplate = () => {
	const markup = resolve(__dirname, "..", "src/markup");
	invalidate(require.cache, markup, {
		recursive: true,
	});
	return require(markup);
};

const debounce = t => f => {
	let timeout;
	return (...args) => {
		clearTimeout(timeout);
		timeout = setTimeout(() => f(...args), t);
	};
};

const tryCatch = f => {
	try {
		f();
	} catch (e) {
		console.error(e);
	}
};

const bob = ({ watch = true }) => {
	const build = () => (
		console.log("Building src/markup..."),
		tryCatch(() =>
			writeFileSync(
				resolve(__dirname, "..", "docs/index.html"),
				render.sync(getTemplate()),
			),
		)
	);

	if (watch) {
		console.log("Watching src/markup...");
		chokidar
			.watch(resolve(__dirname, "..", "src/markup"))
			.on("all", debounce(100)(build));
	} else build();
};

module.exports = { builder: bob };

if (require.main === module) {
	module.exports({});
}
